{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS CloudFormation VPC and add an EC2 instance with an Elastic IP address and a security group.",
  "Parameters": {
    "EnvironmentName": {
      "Type": "String",
      "Description": "Enter an environment name that is prefixed to resource names"
    },
    "VpcCIDR": {
      "Description": "Enter the IP range(CIDR notation) for this VPC",
      "Type": "String"
    },
    "PublicSubnet1CIDR": {
      "Description": "Enter the IP range (CIDR notation) for the public subnet in the first Availability Zone",
      "Type": "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnet2CIDR": {
      "Description": "Enter the IP range (CIDR notation) for the public subnet in the second Availability Zone",
      "Type": "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "PublicSubnet3CIDR": {
      "Description": "Enter the IP range (CIDR notation) for the public subnet in the third Availability Zone",
      "Type": "String",
      "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
      "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
    },
    "AWSRegion": {
      "Type": "String",
      "Description": "AWS region"
    },
    "DBName": {
      "Type": "String",
      "Description": "Name of database to be created when DB instance is created",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "Must begin with a letter and contain only alphanumeric characters."
    },
    "DBIdentifier": {
      "Type": "String",
      "Description": "My database instance",
      "MinLength": "1",
      "MaxLength": "63"
    },
    "DBInstanceClass": {
      "Default": "db.t3.micro",
      "Description": "DB instance class",
      "Type": "String",
      "ConstraintDescription": "Must select a valid DB instance type."
    },
    "DBUsername": {
      "NoEcho": "true",
      "Description": "Username for MySQL database access",
      "Type": "String",
      "MinLength": "1",
      "MaxLength": "16",
      "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
      "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
    },
    "DBPassword": {
      "NoEcho": "true",
      "Description": "Password MySQL database access",
      "Type": "String",
      "MinLength": "8",
      "MaxLength": "41"
    },
    "Engine": {
      "Type": "String",
      "Default": "MySQL",
      "Description": "Type of database instance"
    },
    "EngineVersion": {
      "Type": "String",
      "Default": "8.0.16",
      "Description": "Type of database instance"
    },
    "DBAllocatedStorage": {
      "Default": "8",
      "Description": "The size of the database (GiB)",
      "Type": "Number",
      "MinValue": "5",
      "MaxValue": "1024",

      "ConstraintDescription": "must be between 20 and 65536 GiB."
    },
    "InstanceType": {
      "Type": "String",
      "Default": "t2.micro",
      "Description": "Type of ec2 instance"
    },
    "AWSKeyName": {
      "Type": "String",
      "Description": "Key name for EC2 Instance"
    },
    "EC2S3RolePolicyName": {
      "Type": "String",
      "Default": "WebAppS3",
      "Description": "EC2 policy name"
    },
    "CodeDeployEC2S3PolicyName": {
      "Type": "String",
      "Default": "CodeDeploy-EC2-S3",
      "Description": "Code deploy permissions policy"
    },
    "CodeDeployS3Bucket": {
      "Type": "String",
      "Description": "S3 bucket"
    },
    "CircleCIUploadS3PolicyName": {
      "Type": "String",
      "Default": "CircleCI-Upload-To-S3",
      "Description": "Circle Ci permissions to upload to code deploy s3 policy"
    },
    "CodeDeployEC2RoleName": {
      "Type": "String",
      "Default": "CodeDeployEC2ServiceRole",
      "Description": "Role for EC2"
    },
    "CodeDeployServiceRoleName": {
      "Type": "String",
      "Default": "CodeDeployServiceRole",
      "Description": "Role"
    },
    "EC2Tag": {
      "Type": "String",
      "Description": "Tag for the EC2 instance"
    },
    "AccountId": {
      "Type": "String",
      "Description": "AWS account id"
    },
    "CircleCiUser": {
      "Type": "String",
      "Description": "CircleCi username"
    },
    "CircleCICodeDeployPolicyName": {
      "Type": "String",
      "Default": "CircleCI-Code-Deploy",
      "Description": "CircleCi code deploy policy name"
    },
    "AmiId": {
      "Type": "String",
      "Description": "AMI Id"
    },
    "CodeDeployApplicationName": {
      "Type": "String",
      "Description": "CircleCi username"
    },
    "CodeDeployApplicationComputePlatform": {
      "Type": "String",
      "Description": "CircleCi username"
    },
    "CodeDeployDevelopmentGroupName": {
      "Type": "String",
      "Description": "CircleCi username"
    }
  },
  "Resources": {
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": {
          "Ref": "VpcCIDR"
        },
        "EnableDnsHostnames": "true",
        "EnableDnsSupport": "true",
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "EnvironmentName"
            }
          }
        ]
      }
    },
    "PublicSubnet1": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "0",
            {
              "Fn::GetAZs": {
                "Ref": "AWSRegion"
              }
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet1CIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet 1 (AZ1)"
            }
          }
        ]
      }
    },
    "PublicSubnet2": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "1",
            {
              "Fn::GetAZs": {
                "Ref": "AWSRegion"
              }
            }
          ]
        },
        "CidrBlock": {
          "Ref": "PublicSubnet2CIDR"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet 2 (AZ2)"
            }
          }
        ]
      }
    },
    "PublicSubnet3": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "CidrBlock": {
          "Ref": "PublicSubnet3CIDR"
        },
        "AvailabilityZone": {
          "Fn::Select": [
            "2",
            {
              "Fn::GetAZs": {
                "Ref": "AWSRegion"
              }
            }
          ]
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Subnet 1 (AZ3)"
            }
          }
        ]
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Ref": "EnvironmentName"
            }
          }
        ]
      }
    },
    "AttachGateway": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "InternetGatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "RouteTable": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {
          "Ref": "VPC"
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": {
              "Fn::Sub": "${EnvironmentName} Public Routes"
            }
          }
        ]
      }
    },
    "Route": {
      "Type": "AWS::EC2::Route",
      "DependsOn": "AttachGateway",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "InternetGateway"
        }
      }
    },
    "PublicSubnet1RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet1"
        }
      }
    },
    "PublicSubnet2RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet2"
        }
      }
    },
    "PublicSubnet3RouteTableAssociation": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "RouteTableId": {
          "Ref": "RouteTable"
        },
        "SubnetId": {
          "Ref": "PublicSubnet3"
        }
      }
    },
    "ApplicationSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http to client host",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 80,
            "ToPort": 80,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 22,
            "ToPort": 22,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 443,
            "ToPort": 443,
            "CidrIp": "0.0.0.0/0"
          },
          {
            "IpProtocol": "tcp",
            "FromPort": 3000,
            "ToPort": 3000,
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },
    "DatabaseSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Allow http to client RDS",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": 3306,
            "ToPort": 3306,
            "SourceSecurityGroupId": {
              "Ref": "ApplicationSecurityGroup"
            }
          }
        ]
      }
    },
    "DbSubnetGroup": {
      "Type": "AWS::RDS::DBSubnetGroup",
      "Properties": {
        "DBSubnetGroupDescription": "Db subnet group from public subnet 1 and 2",
        "SubnetIds": [
          {
            "Ref": "PublicSubnet1"
          },
          {
            "Ref": "PublicSubnet2"
          }
        ]
      }
    },
    "RDSDb": {
      "Type": "AWS::RDS::DBInstance",
      "Properties": {
        "DBInstanceIdentifier": {
          "Ref": "DBIdentifier"
        },
        "DBName": {
          "Ref": "DBName"
        },
        "DBInstanceClass": {
          "Ref": "DBInstanceClass"
        },
        "Engine": {
          "Ref": "Engine"
        },
        "EngineVersion": {
          "Ref": "EngineVersion"
        },
        "MasterUsername": {
          "Ref": "DBUsername"
        },
        "MasterUserPassword": {
          "Ref": "DBPassword"
        },
        "AllocatedStorage": {
          "Ref": "DBAllocatedStorage"
        },
        "MultiAZ": "false",
        "DBSubnetGroupName": {
          "Ref": "DbSubnetGroup"
        },
        "PubliclyAccessible": "false",
        "VPCSecurityGroups": [
          {
            "Ref": "DatabaseSecurityGroup"
          }
        ]
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [{ "Ref": "CodeDeployEC2Role" }]
      }
    },
    "EC2Instance": {
      "Type": "AWS::EC2::Instance",
      "DependsOn": "RDSDb",
      "Properties": {
        "ImageId": {
          "Ref": "AmiId"
        },
        "KeyName": {
          "Ref": "AWSKeyName"
        },
        "DisableApiTermination": "false",
        "Tags": [
          {
            "Key": "EC2",
            "Value": {
              "Ref": "EC2Tag"
            }
          }
        ],
        "NetworkInterfaces": [
          {
            "SubnetId": { "Ref": "PublicSubnet1" },
            "AssociatePublicIpAddress": "true",
            "DeviceIndex": "0",
            "GroupSet": [{ "Ref": "ApplicationSecurityGroup" }]
          }
        ],
        "InstanceType": {
          "Ref": "InstanceType"
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sdm",
            "Ebs": {
              "VolumeType": "gp2",
              "DeleteOnTermination": "true",
              "VolumeSize": "20"
            }
          },
          {
            "DeviceName": "/dev/sdk",
            "NoDevice": {}
          }
        ],
        "IamInstanceProfile": { "Ref": "EC2Role" },
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#!/bin/bash\n",
                "cd /home/ubuntu\n",
                "mkdir config\n",
                "cd config\n",
                "touch config.json\n",
                "echo { >> config.json\n",
                "echo '\"development\"': { >> config.json\n",
                "echo '\"username\"': '\"",
                { "Ref": "DBUsername" },
                "\"', >> config.json\n",
                "echo '\"password\"': '\"",
                { "Ref": "DBPassword" },
                "\"', >> config.json\n",
                "echo '\"database\"': '\"",
                { "Ref": "DBName" },
                "\"', >> config.json\n",
                "echo '\"host\"': '\"",
                {
                  "Fn::GetAtt": ["RDSDb", "Endpoint.Address"]
                },
                "\"', >> config.json\n",
                "echo '\"dialect\"': '\"",
                "mysql",
                "\"'} >> config.json\n",
                "echo } >> config.json\n",
                "touch s3_bucket.json\n",
                "echo { '\"s3_bucket_name\"': '\"",
                {
                  "Ref": "S3Bucket"
                },
                "\"'} >> s3_bucket.json"
              ]
            ]
          }
        }
      }
    },
    "EC2S3RolePolicies": {
      "Type": "AWS::IAM::Policy",
      "DependsOn": "S3Bucket",
      "Properties": {
        "PolicyName": {
          "Ref": "EC2S3RolePolicyName"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:GetObject", "s3:DeleteObject", "s3:PutObject"],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3Bucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "S3Bucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [{ "Ref": "CodeDeployEC2Role" }]
      }
    },
    "CodeDeployEC2S3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Ref": "CodeDeployEC2S3PolicyName"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:Get*", "s3:List*"],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "CodeDeployS3Bucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "CodeDeployS3Bucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Roles": [{ "Ref": "CodeDeployEC2Role" }]
      }
    },
    "CodeDeployEC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Ref": "CodeDeployEC2RoleName"
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["ec2.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy"
        ],
        "Path": "/"
      }
    },
    "CircleCIUploadS3Policy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Ref": "CircleCIUploadS3PolicyName"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": ["s3:PutObject", "s3:Get*", "s3:List*"],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "CodeDeployS3Bucket"
                      }
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:s3:::",
                      {
                        "Ref": "CodeDeployS3Bucket"
                      },
                      "/*"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users": [
          {
            "Ref": "CircleCiUser"
          }
        ]
      }
    },
    "CircleCICodeDeployPolicy": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": {
          "Ref": "CircleCICodeDeployPolicyName"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:RegisterApplicationRevision",
                "codedeploy:GetApplicationRevision"
              ],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      { "Ref": "AWSRegion" },
                      ":",
                      { "Ref": "AccountId" },
                      ":application:",
                      { "Ref": "CodeDeployApplication" }
                    ]
                  ]
                }
              ]
            },
            {
              "Effect": "Allow",
              "Action": [
                "codedeploy:CreateDeployment",
                "codedeploy:GetDeployment"
              ],
              "Resource": ["*"]
            },
            {
              "Effect": "Allow",
              "Action": ["codedeploy:GetDeploymentConfig"],
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      { "Ref": "AWSRegion" },
                      ":",
                      { "Ref": "AccountId" },
                      ":deploymentconfig:CodeDeployDefault.OneAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      { "Ref": "AWSRegion" },
                      ":",
                      { "Ref": "AccountId" },
                      ":deploymentconfig:CodeDeployDefault.HalfAtATime"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:aws:codedeploy:",
                      { "Ref": "AWSRegion" },
                      ":",
                      { "Ref": "AccountId" },
                      ":deploymentconfig:CodeDeployDefault.AllAtOnce"
                    ]
                  ]
                }
              ]
            }
          ]
        },
        "Users": [
          {
            "Ref": "CircleCiUser"
          }
        ]
      }
    },
    "CodeDeployServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "RoleName": {
          "Ref": "CodeDeployServiceRoleName"
        },
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": ["codedeploy.amazonaws.com"]
              },
              "Action": ["sts:AssumeRole"]
            }
          ]
        },
        "ManagedPolicyArns": [
          "arn:aws:iam::aws:policy/service-role/AWSCodeDeployRole"
        ],
        "Path": "/"
      }
    },
    "CodeDeployApplication": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": {
          "Ref": "CodeDeployApplicationName"
        },
        "ComputePlatform": {
          "Ref": "CodeDeployApplicationComputePlatform"
        }
      }
    },
    "CodeDeployDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": { "Ref": "CodeDeployApplication" },
        "DeploymentStyle": {
          "DeploymentOption": "WITHOUT_TRAFFIC_CONTROL",
          "DeploymentType": "IN_PLACE"
        },
        "DeploymentGroupName": { "Ref": "CodeDeployDevelopmentGroupName" },
        "DeploymentConfigName": "CodeDeployDefault.AllAtOnce",
        "AutoRollbackConfiguration": {
          "Events": ["DEPLOYMENT_FAILURE"]
        },
        "ServiceRoleArn": { "Fn::GetAtt": ["CodeDeployServiceRole", "Arn"] },
        "Ec2TagFilters": [
          {
            "Key": "EC2",
            "Value": {
              "Ref": "EC2Tag"
            },
            "Type": "KEY_AND_VALUE"
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "AccessControl": "Private",
        "LifecycleConfiguration": {
          "Rules": [
            {
              "Id": "IAAfter30Days",
              "Status": "Enabled",
              "Transition": {
                "StorageClass": "STANDARD_IA",
                "TransitionInDays": 30
              }
            }
          ]
        },
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    }
  },
  "Outputs": {
    "VPC": {
      "Description": "A reference to the created VPC",
      "Value": {
        "Ref": "VPC"
      }
    },
    "Subnets": {
      "Description": "A List of public subnets",
      "Value": {
        "Fn::Join": [
          ",",
          [
            {
              "Ref": "PublicSubnet1"
            },
            {
              "Ref": "PublicSubnet2"
            },
            {
              "Ref": "PublicSubnet3"
            }
          ]
        ]
      }
    }
  }
}
